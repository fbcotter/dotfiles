[alias]

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit --first-parent

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    ctags = !.git/hooks/ctags

    recent-branches = for-each-ref --sort=-committerdate --count=10 --format='%(refname:short)' refs/heads/

    lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

[apply]

    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false
    autocrlf = input 
    safecrlf = false
    editor = nvim

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[commit]

    # https://help.github.com/articles/signing-commits-using-gpg/
    gpgsign = false

[diff]

    # Detect copies as well as renames
    renames = copies
    tool = vimdiff

[diff "bin"]

    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]

    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = vimdiff

[push]

    # Use the Git 1.x.x default to avoid errors on machines with old Git
    # installations. To use `simple` instead, add this to your `~/.extra` file:
    # `git config --global push.default simple`. See http://git.io/mMah-w.
    default = current
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

# URL shorthands

[user]
    email = fbcotter90@gmail.com
    name = Fergal Cotter
    signingkey = 3F4F1C11
[filter "dropoutput_ipynb"]
    clean = ~/repos/toobaz/ipynb_output_filter/ipynb_output_filter.py
    smudge = cat
[credential]
    helper = cache --timeout=3600
[filter "lfs"]
    process = git-lfs filter-process --skip
    required = true
	clean = git-lfs clean -- %f
    smudge = git-lfs smudge --skip -- %f

[log]
    date = relative

; [format]
    ; pretty = format:%C(auto,yellow)%h|%C(auto,magenta)% G? %C(auto,blue)|%>(12,trunc)%ad %C(auto,green)|%<(11,trunc)%aN| %C(auto,reset)%s%C(auto,red)% gD% D
[grep]
    lineNumber = true
[pull]
    rebase = false
